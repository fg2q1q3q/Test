{
  "name": "Android技术博客",
  "tagline": "Barry.Github.io",
  "body": "\r\n#Android封装库使用讲解\r\n\r\n------\r\n\r\n本节主要讲解两方面内容：\r\n#### **封装库的讲解**\r\n#### **Android设计规范**\r\n> * 为什么需要封装库\r\n> * 封装库都包含哪些内容\r\n> * 封装库如何使用\r\n> * [移动端设计遵循原则](http://wiki.jikexueyuan.com/project/material-design/layout/structure.html)\r\n\r\n**为什么需要封装库**\r\n> * 重用\r\n> * 不必关心具体的实现 \r\n> * 符合设计原则\r\n> * 提高效率\r\n\r\n**库结构**\r\n```flow\r\nst=>start: mylibrary\r\nop=>operation: applibrary\r\ne=>end: app\r\nst->op->e\r\n```\r\n**MVVM模式**\r\n\r\n[MVVM的优点](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0602/2973.html)\r\n\r\n\r\n![示例图片][1]\r\nmodel view controller\r\nmodel view viewModel\r\n***以下为已封装常用工具类简介***\r\n\r\n**DialogUtils/MaterialDialogUtils**\r\n> * 设置全局统一风格对话框普通样式/Material样式\r\n\r\n**CastUtils**\r\n> * 避免类型转换错误异常\r\n\r\n**BitmapUtils**\r\n\r\n> * drawable bitmap互转\r\n> * 获取图片在相册中的方向\r\n> * Bitmap比例缩放\r\n> * 圆形Bitmap\r\n> * Bitmap缩略图\r\n> * Bitmap保存到指定路径\r\n...\r\n\r\n**Logger**\r\n\r\n> * 日志格式化输出\r\n> * 日志定位\r\n```python\r\nLogger.d(...);\r\nLogger.i(...);\r\nLogger.e(...);\r\nLogger.w(...);\r\nLogger.v(...);\r\nLogger.a(...);\r\n...\r\n```\r\n**StringUtils**\r\n\r\n> * 字符串空判断\r\n> * 获取字符串长度\r\n> * 字符串UTF8编码\r\n> * 字符串HTML转换\r\n> * 数据库字符转义\r\n...\r\n\r\n**CrashHanlder**\r\n\r\n> * crash信息抓取\r\n> * 自定义crash存储路径\r\n> * 设置crash事件回调\r\n```python\r\nCrashHandler.getInstance().init(this)\r\n                .setOnCrashListener(...)\r\n                .setCrashSave(true)\r\n                .setCrashSaveTargetFolder(\"/sdcard/crash\");\r\n```     \r\n**ActivityManager**\r\n\r\n> * Activity堆栈\r\n> * finish指定Activity\r\n> * finish所有Activity\r\n> * 获取堆某个Activity\r\n> * 退出App\r\n```python\r\n//在BaseActivity中添加\r\n//onCreate\r\nActivityManager.getActivityManager().addActivity(this);\r\n//onDestory\r\nActivityManager.getActivityManager().finishActivity(this);\r\n\r\n//finish所有页面\r\nActivityManager.getActivityManager().finishAllActivity(this);\r\n//finish所有页面和kill app\r\nActivityManager.getActivityManager().appExit(this);\r\n```\r\n**AppCacheUtils**\r\n\r\n> * 数据缓冲/配置信息存储工具类\r\n> * 多进程访问\r\n...\r\n```python\r\n//存储\r\nAppCacheUtils.getInstance(context).put(key, int);\r\nAppCacheUtils.getInstance(context).put(key, String);\r\nAppCacheUtils.getInstance(context).put(key, char);\r\nAppCacheUtils.getInstance(context).put(key, float);\r\nAppCacheUtils.getInstance(context).put(key, double);\r\nAppCacheUtils.getInstance(context).put(key, boolean);\r\nAppCacheUtils.getInstance(context).put(key, byte[]);\r\nAppCacheUtils.getInstance(context).put(key, JSONObject);\r\nAppCacheUtils.getInstance(context).put(key, Serializable);\r\n...\r\n//获取\r\nAppCacheUtils.getInstance(context).getInt(key, intDefault);\r\nAppCacheUtils.getInstance(context).getString(key, stringDefault);\r\nAppCacheUtils.getInstance(context).getChar(key, charDefault);\r\nAppCacheUtils.getInstance(context).getFloat(key, floatDefault);\r\nAppCacheUtils.getInstance(context).getDouble(key, doubleDefault);\r\nAppCacheUtils.getInstance(context).getBoolean(key, booleanDefault);\r\nAppCacheUtils.getInstance(context).getJSONObject(key);\r\nAppCacheUtils.getInstance(context).getObject(key);\r\n...\r\n//清除所有缓冲\r\nAppCacheUtils.get(context).clear();\r\n//移除某个缓存\r\nAppCacheUtils.get(context).remove(key);\r\n```\r\n**DateUtils**\r\n\r\n> * 根据String构建一个Date\r\n> * 指定format构建\r\n> * 根据Date格式化\r\n> * 获取Date 年、月、日、时、分、秒、毫秒\r\n> * 获取一个月最后一天\r\n> * 获取一个月第一天\r\n> * 根据Date获取星期\r\n> * 时间友好显示\r\n...\r\n\r\n**DeviceUtils**\r\n\r\n> * 判断是否有内存卡\r\n> * 获取本机IP\r\n> * 多个内存卡时获取外置内存卡\r\n> * 获取内存卡总大小、使用大小和剩余多少\r\n> * 判断网络是否可以用\r\n> * 判断某个服务是否在运行\r\n> * 判断某个进程是否在运行\r\n> * 获取IMEI、IMSI、MAC、UUID\r\n> * 执行震动\r\n> * 获取相机最后一次拍照的图片\r\n> * 获取屏幕大小\r\n> * copy到剪切板\r\n> * 获取所有应用程序\r\n> * 判断某个app是否安装了\r\n> * dp px转换\r\n> * 获取system bar高度\r\n> * 获取navigation bar高度\r\n> * 输入法隐藏和显示\r\n> * 启动某个应用下的Activity\r\n> * 返回Home\r\n> * 获取网络类型\r\n> * 拨打电话\r\n> * 发送短信\r\n...\r\n\r\n**FileUtils**\r\n\r\n> * 读取某个文件内容\r\n> * 将某个文本写入到指定文件\r\n> * 文件移动\r\n> * 文件拷贝\r\n> * 获取文件扩展名\r\n> * 获取URL扩展名\r\n> * 获取文件名\r\n> * 获取文件大小\r\n> * 创建文件夹以及父文件夹\r\n...\r\n```python\r\n FileUtils.readFile(String, String)//read file\r\n FileUtils.readFileToList(String, String)// read file to string list\r\n FileUtils.writeFile(String, String, boolean)// write file from String\r\n FileUtils.writeFile(String, String)// write file from String\r\n FileUtils.writeFile(String, List, boolean)// write file from String List\r\n FileUtils.writeFile(String, List)// write file from String List\r\n FileUtils.writeFile(String, InputStream)// write file\r\n FileUtils.writeFile(String, InputStream, boolean)// write file\r\n FileUtils.writeFile(File, InputStream)// write file\r\n FileUtils.writeFile(File, InputStream, boolean)// write file\r\n\r\n FileUtils.moveFile(File, File)// or FileUtils.moveFile(String, String)\r\n FileUtils.copyFile(String, String)\r\n FileUtils.getFileExtension(String)\r\n FileUtils.getFileName(String)\r\n FileUtils.getFileNameWithoutExtension(String)\r\n FileUtils.getFileSize(String)\r\n FileUtils.deleteFile(String)\r\n FileUtils.isFileExist(String)\r\n FileUtils.isFolderExist(String)\r\n FileUtils.makeFolders(String)\r\n FileUtils.makeDirs(String)\r\n```\r\n**StorageUtils**\r\n\r\n> * 缓冲目录工具类\r\n```python\r\nFile cacheDir = StorageUtils.getCacheDirectory(context);///Android/data/packageName/cache\r\n....\r\nExternalStorage\r\n```\r\n\r\n> * 如果一个手机中有多个sdcard卡可以用到此工具\r\n```python\r\nMap<String, File> storageMap = ExternalStorage.getAllStorageLocations();\r\n```\r\n**ManifestUtils**\r\n\r\n> * 获取app版本号\r\n> * 获取Meta Data数据\r\n> * 获取app版本名称\r\n> * 获取app渠道名\r\n```python\r\nManifestUtils.getMetaData(context, metaKey);\r\nManifestUtils.getChannelNo(context, channelKey);\r\nManifestUtils.getVersionName(context);\r\nManifestUtils.getVersionCode(context);\r\n```\r\n**ApkUtils**\r\n\r\n> * 安装某个apk\r\n> * 卸载app\r\n> * META-INF获取渠道名称\r\n```python\r\nApkUtils.getChannelFromApk(context, channelPrefix)//META-INF识别渠道\r\nApkUtils.install(context, apkFile);//安装\r\nApkUtils.uninstall(context, packageName);//卸载\r\n```\r\n**JsonFormatUtils**\r\n\r\n> * JSON格式化显示\r\n\r\n```python\r\nString formatJson = JsonFormatUtils.formatJson(json);\r\n```\r\n> * JSON合法性验证\r\nJsonValidator\r\n```python\r\nboolean valid = JsonValidator.validate(json);\r\n```\r\n**定时器**\r\n\r\n解决系统的CountDownTimer cancel失效问题\r\n```python\r\n    new CountdownTimer(30000, 1000) {\r\n         public void onTick(long millisUntilFinished) {\r\n            mTextField.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\r\n         }\r\n         public void onFinish() {\r\n            mTextField.setText(\"done!\");\r\n         }\r\n     }.start();\r\n```\r\n**ResourceUtils**\r\n\r\n> * 通过资源名称获取资源ID\r\n```python\r\nResourceUtils.getLayoutId(context, resName);\r\nResourceUtils.getStringId(context, resName);\r\nResourceUtils.getDrawableId(context, resName);\r\nResourceUtils.getMipmapId(context, resName);\r\nResourceUtils.getStyleId(context, resName);\r\nResourceUtils.getStyleableId(context, resName);\r\nResourceUtils.getAnimId(context, resName);\r\nResourceUtils.getId(context, resName);\r\nResourceUtils.getColorId(context, resName);\r\n```\r\n**ShellUtils**\r\n\r\n> * shell相关工具\r\n```python\r\nShellUtils.execCommand(String, boolean)\r\nShellUtils.execCommand(String, boolean, boolean)\r\nShellUtils.execCommand(List, boolean)\r\nShellUtils.execCommand(List, boolean, boolean)\r\nShellUtils.execCommand(String[], boolean)\r\nShellUtils.execCommand(String[], boolean, boolean)\r\n```\r\n**加/解密和编码**\r\n\r\n**MD5**\r\n\r\n> * md5编码工具\r\n```python\r\nString result = MD5Coder.getMD5Code(source);\r\n```\r\n**Base64Util**\r\n\r\nbase64编码/解码\r\n```python\r\n//解码\r\nbyte[] srcBytes = Base64Coder.decode(byte[] decodeBytes, flag)\r\nbyte[] srcBytes = Base64Coder.decode(String decodeString, flag)\r\nbyte[] srcBytes = Base64Coder.decode(byte[] decodeBytes, int offset, int len, int flags)\r\n...\r\n//编码\r\nbyte[] decodeBytes = Base64Coder.encode(byte[] src, flag)\r\nbyte[] decodeBytes = Base64Coder.encode(String src, flag)\r\nString decodeString = Base64Coder.encodeToString(byte[] src, flag)\r\nbyte[] decodeBytes = Base64Coder.encode(byte[] src, int offset, int len, int flags)\r\n...\r\n```\r\n**AESCoder**\r\n\r\n对称加密算法\r\n```python\r\n//加密\r\nString password = \"password\";\r\nString message = \"hello world\"; \r\ntry {\r\n    String encryptedMsg = AESCoder.encrypt(password, message);\r\n}catch (GeneralSecurityException e){\r\n  //handle error\r\n}\r\n\r\n//解密\r\nString password = \"password\";\r\nString encryptedMsg = \"2B22cS3UC5s35WBihLBo8w==\";\r\ntry {\r\n    String messageAfterDecrypt = AESCoder.decrypt(password, encryptedMsg);\r\n}catch (GeneralSecurityException e){\r\n //handle error - could be due to incorrect password or tampered encryptedMsg\r\n}\r\n```\r\n**DESCoder**\r\n\r\n对称加密算法\r\n```python\r\n//加密\r\nbyte[] encrypt = DESCoder.encrypt(\"Hello World\".getBytes(), \"password\");\r\nLogger.d(\"encrypt=\" + HexCoder.encodeHexString(encrypt));\r\n//解密\r\nbyte[] decrypt = DESCoder.decrypt(encrypt, \"password\");\r\nLogger.d(\"decrypt=\" + new String(decrypt));\r\n```\r\n**DES3Coder**\r\n\r\n对称加密算法\r\n```python\r\n//加密\r\nbyte[] encrypt = DES3Coder.encryptMode(\"Hello World\".getBytes(), \"password\");\r\nLogger.d(\"encrypt=\" + HexCoder.encodeHexString(encrypt));\r\n//解密\r\nbyte[] decrypt = DES3Coder.decryptMode(encrypt, \"password\");\r\nLogger.d(\"decrypt=\" + new String(decrypt));\r\n```\r\n**HexCoder**\r\n\r\n16进制编码\r\n```python\r\n//byte[]转16进制\r\nchar[] encodeHex(byte[] data)\r\n//byte[]转16进制（大写）\r\nchar[] encodeHex(byte[] data, boolean toLowerCase)\r\n//byte[]转16进制字符输出\r\nString encodeHexString(byte[] data)\r\n....\r\n```\r\n**EncodeUtils**\r\n\r\n二进制,字节数组,字符,十六进制,BCD编码转换\r\n```python\r\n//把16进制字符串转换成字节数组\r\nEncodeUtils.hexStringToByte(String hex)\r\n//把字节数组转换成16进制字符串\r\nEncodeUtils.bytesToHexString(byte[] bArray)\r\n//BCD码转为10进制串(阿拉伯数据)\r\nEncodeUtils.bcd2Str(byte[] bytes)\r\n//10进制串转为BCD码\r\nEncodeUtils.str2Bcd(String asc)\r\n//BCD码转ASC码\r\nEncodeUtils.bcd2asc(byte[] bytes)\r\n//将字符串编码成16进制数字\r\nEncodeUtils.encodeHex(String str)\r\n//将16进制数字解码成字符串\r\nEncodeUtils.decodeHex(String bytes)\r\n```\r\n**RSACoder**\r\n\r\n非对称加密算法\r\nRSA 工具类。提供加密，解密，生成密钥对等方法。\r\n```python\r\n//生成密钥对\r\nKeyPair key = RSACoder.generateKeyPair()\r\n//生成公钥\r\nRSAPublicKey key = RSACoder.generateRSAPublicKey(byte[] modulus, byte[] publicExponent)\r\n//生成私钥\r\nRSAPrivateKey key = RSACoder.generateRSAPrivateKey(byte[] modulus, byte[] privateExponent)\r\n//加密\r\nbyte[] result = RSACoder.encrypt(Key key, byte[] data,PADDING padding)\r\n//公钥加密\r\nbyte[] result = RSACoder.encryptByPublicKey(byte[] publicKey, byte[] data,PADDING padding)\r\n//私钥加密\r\nbyte[] result = RSACoder.encryptByPrivateKey(byte[] publicKey, byte[] privateKey, byte[] data,PADDING padding)\r\n//解密\r\nbyte[] result = RSACoder.decrypt(Key key, byte[] data,PADDING padding)\r\n//公钥解密\r\nbyte[] result = RSACoder.decryptByPublicKey(byte[] publicKey, byte[] data,PADDING padding)\r\n//私钥解密\r\nbyte[] result = RSACoder.decryptByPrivateKey(byte[] publicKey, byte[] privateKey, byte[] data,PADDING padding)\r\n```\r\n**Adapter**\r\n\r\n**ViewHolderAdapter**\r\n\r\n**BaseAdapter** \r\n\r\n**FragmentAdapter**\r\n\r\n**RecyclingPagerAdapter**\r\n\r\n**可回收的PagerAdapter**\r\n\r\n\r\n  [1]: http://pic.58pic.com/58pic/17/21/70/58r58PICDqP_1024.jpg",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}